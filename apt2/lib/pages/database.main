[09:11, 20/02/2025] Fredi VODOUNOUKPE**Dev mobile and  web  *( Apple center)*: import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:intl/intl.dart'; // 📌 Pour formater la date et l'heure

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // 🔹 Permet d'utiliser SQLite avant le démarrage de l'app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: TransactionHistoryScreen(), // 🔹 Écran principal
    );
  }
}

// 📌 1️⃣ Classe pour gérer SQLite
class DatabaseHelper {
  static Database? _database;

  // 🔹 Récupérer la base de données
  Future<Database> get database async {
    if (_database != null) return _databa…
[09:16, 20/02/2025] Fredi VODOUNOUKPE**Dev mobile and  web  *( Apple center)*: import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:intl/intl.dart'; // 📌 Pour formater la date et l'heure

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // 🔹 Permet d'utiliser SQLite avant le démarrage de l'app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: TransactionHistoryScreen(), // 🔹 Écran principal
    );
  }
}

// 📌 1️⃣ Classe pour gérer SQLite
class DatabaseHelper {
  static Database? _database;

  // 🔹 Récupérer la base de données
  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDB();
    return _database!;
  }

  // 🔹 Initialiser la base de données
  Future<Database> _initDB() async {
    String path = join(await getDatabasesPath(), 'transactions.db'); // 📌 Définition du chemin du fichier SQLite
    return await openDatabase(
      path,
      version: 1,
      onCreate: (db, version) { // 🔹 Création de la table SQLite
        return db.execute(
          """
          CREATE TABLE transactions(
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            amount INTEGER,
            recipient TEXT,
            date TEXT
          )
          """,
        );
      },
    );
  }

  // 🔹 Ajouter une transaction
  Future<void> insertTransaction(int amount, String recipient) async {
    final db = await database;
    String currentDate = DateFormat('yyyy-MM-dd HH:mm:ss').format(DateTime.now()); // 📌 Génère la date et l'heure actuelles
    await db.insert("transactions", {
      "amount": amount,
      "recipient": recipient,
      "date": currentDate,
    });
  }

  // 🔹 Récupérer toutes les transactions
  Future<List<Map<String, dynamic>>> getTransactions() async {
    final db = await database;
    return await db.query("transactions", orderBy: "date DESC"); // 📌 Trie par date (la plus récente en premier)
  }

  // 🔹 Supprimer une transaction
  Future<void> deleteTransaction(int id) async {
    final db = await database;
    await db.delete("transactions", where: "id = ?", whereArgs: [id]);
  }
}

// 📌 2️⃣ Interface Utilisateur
class TransactionHistoryScreen extends StatefulWidget {
  @override
  _TransactionHistoryScreenState createState() =>
      _TransactionHistoryScreenState();
}

class _TransactionHistoryScreenState extends State<TransactionHistoryScreen> {
  final DatabaseHelper dbHelper = DatabaseHelper(); // 📌 Instance de la base de données
  List<Map<String, dynamic>> transactions = []; // 🔹 Liste des transactions
  Map<String, dynamic>? selectedTransaction; // 🔹 Transaction sélectionnée

  @override
  void initState() {
    super.initState();
    _loadTransactions(); // 🔹 Charge les transactions au démarrage
  }

  // 🔹 Charger les transactions depuis SQLite
  Future<void> _loadTransactions() async {
    List<Map<String, dynamic>> loadedTransactions = await dbHelper.getTransactions();
    setState(() {
      transactions = loadedTransactions;
    });
  }

  // 🔹 Ajouter une transaction
  Future<void> _addTransaction(int amount, String recipient) async {
    await dbHelper.insertTransaction(amount, recipient);
    _loadTransactions(); // 🔹 Rafraîchir l'affichage
  }

  // 🔹 Supprimer une transaction
  Future<void> _removeTransaction(int id) async {
    await dbHelper.deleteTransaction(id);
    setState(() {
      selectedTransaction = null;
    });
    _loadTransactions();
  }
